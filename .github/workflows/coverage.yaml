name: Coverage Report
permissions:
  contents: write
  pull-requests: write
  pages: write
  id-token: write
on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
jobs:
  init:
    runs-on: ubuntu-24.04
    outputs:
      needs-init: ${{ steps.check.outputs.needs-init }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: true
          fetch-depth: 1
      - name: Check if initialization is needed
        id: check
        run: |
          if test -f "ext/.gitkeep" && test "$(cat "ext/.gitkeep")" = "pskel_uninitialized"; then
            echo "needs-init=true" >> "${GITHUB_OUTPUT}"
          else
            echo "needs-init=false" >> "${GITHUB_OUTPUT}"
          fi
      - name: Initialize extension
        if: steps.check.outputs.needs-init == 'true'
        run: |
          docker compose run -v "$(pwd)/ext:/ext" --rm shell pskel init skeleton
      - name: Upload initialized extension
        if: steps.check.outputs.needs-init == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: initialized-ext
          path: ext/
          retention-days: 1

  collect-coverage:
    needs: init
    runs-on: ${{ matrix.platform }}
    strategy:
      matrix:
        versions: ['8.4']
        platform: ['ubuntu-24.04', 'ubuntu-24.04-arm']
        ts: ['cli', 'zts']
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: true
          fetch-depth: 1
      - name: Download initialized extension
        if: needs.init.outputs.needs-init == 'true'
        uses: actions/download-artifact@v5
        with:
          name: initialized-ext
          path: ext/
      - name: Build container and run gcov tests
        run: |
          docker compose build \
            --build-arg TAG="${{ matrix.versions }}-${{ matrix.ts }}" \
            shell
          docker compose run -v "$(pwd)/ext:/ext" --rm shell pskel test gcov
      - name: Upload complete ext directory with coverage data
        uses: actions/upload-artifact@v4
        with:
          name: ext-with-coverage-${{ matrix.platform }}-${{ matrix.versions }}-${{ matrix.ts }}
          path: ext/
          retention-days: 1

  combine-and-deploy:
    needs: [collect-coverage, init]
    runs-on: ubuntu-24.04
    if: always() && needs.collect-coverage.result == 'success'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: true
          fetch-depth: 1
      - name: Install lcov
        run: |
          sudo apt-get update
          sudo apt-get install -y "lcov"
      - name: Download all ext directories with coverage data
        uses: actions/download-artifact@v5
        with:
          pattern: ext-with-coverage-*
          merge-multiple: false
          path: coverage-artifacts/
      - name: Combine coverage data and generate reports
        run: |
          mkdir -p "combined-ext"
          mkdir -p "coverage-reports"

          LCOV_FILES=""
          for ARTIFACT_DIR in coverage-artifacts/ext-with-coverage-*; do
            if test -d "${ARTIFACT_DIR}"; then
              ARTIFACT_NAME=$(basename "${ARTIFACT_DIR}")
              cp -r "${ARTIFACT_DIR}" "coverage-reports/${ARTIFACT_NAME}"

              if test -f "${ARTIFACT_DIR}/lcov.info"; then
                cp "${ARTIFACT_DIR}/lcov.info" "coverage-reports/${ARTIFACT_NAME}.info"
              else
                lcov --capture --directory "${ARTIFACT_DIR}" \
                  --exclude "/usr/local/include/*" --exclude "/usr/src/php/*" \
                  --output-file "coverage-reports/${ARTIFACT_NAME}.info" || true
              fi

              if test -f "coverage-reports/${ARTIFACT_NAME}.info"; then
                LCOV_FILES="$LCOV_FILES --add-tracefile coverage-reports/${ARTIFACT_NAME}.info"
                echo "Added ${ARTIFACT_NAME}.info to merge list"
              else
                echo "Warning: No coverage data found for ${ARTIFACT_NAME}"
              fi
            fi
          done

          if test -n "${LCOV_FILES}"; then
            echo "Combining coverage files..."
            lcov ${LCOV_FILES} --output-file "combined-ext/combined.info"

            lcov --remove "combined-ext/combined.info" \
              "/usr/*" "*/tests/*" "*/test/*" \
              --output-file "combined-ext/cleaned.info"

            echo "Combined coverage summary:"
            lcov --summary "combined-ext/cleaned.info"
          else
            echo "Error: No coverage files to combine"
            exit 1
          fi
      - name: Generate HTML coverage report
        run: |
          mkdir -p "coverage-html"

          REFERENCE_EXT=$(find coverage-artifacts -name "ext-with-coverage-*" -type d | head -1)
          if test -n "${REFERENCE_EXT}"; then
            sudo mkdir -p /ext
            sudo cp -r "${REFERENCE_EXT}"/* /ext/
            sudo chmod -R +r /ext
          fi

          genhtml \
            --output-directory "coverage-html" \
            --title "Coverage Report" \
            --show-details \
            --highlight \
            --legend \
            "combined-ext/cleaned.info"
      - name: Setup Pages
        if: github.ref == 'refs/heads/main'
        uses: actions/configure-pages@v5
      - name: Upload Pages artifact
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v4
        with:
          path: coverage-html/
      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'
        id: deployment
        uses: actions/deploy-pages@v4
